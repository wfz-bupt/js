/*
24 最佳实践
24.1 可维护性
24.1.1 什么是可维护性的代码
有以下特点
i）可理解性－－其他人可以接手代码并理解他的意图和一般途径
i）直观性－－代码中的东西一看就能明白，不管其操作过程多么复杂
i）可适应性－－代码以一种数据上的变化不要求完全重写的方法撰写
i）可拓展性－－在代码架构上已考虑到在未来允许对核心功能进行拓展
i）可调试性－－当有地方出错时，代码可以给予你足够的信息尽可能的直接确定问题所在
24.1.2 代码约定
一种让代码变得可维护的简单途径是形成一套js代码的书写约定。杰出的开放源代码项目有着严格的代码约定要求。代码约定的概论
1.可读性
可读性的大部分内容都是和代码的缩进相关的，最佳实践是使用4个空格为缩进，而不是制表符。
另一方面是注释，在大多数语言中，对每个方法的注释都视为一个可行的实践。一般而言，有如下地方需要进行注释，
i）函数与方法－－每个函数或者方法都应该包含一条注释，描述其任务和用于完成任务可能使用的算法，陈述事先的假设也很重要
比如参数和返回值
i）大段代码－－用于完成单个任务的多行代码应该在前面放一个描述任务的注释
i）复杂的算法－－如果使用了一种独特的方式解决某个问题，则要在注释中解释你是如何做的，、
i）hack－－如果因为某种浏览器无法使用普通的方法，你用到的不同的方法需要进行注释
2.变量和函数命名
i）变量名应为名词如car
i）函数名应该以动词开始，如getName
i）变量和函数都应该使用合乎逻辑的名字，不要担心长度，
有了合适的命名，代码阅读起来就像讲述故事一样，更容易理解。
3.变量类型透明
合适的变量命名应该包含 它所表示的变量的数据类型
24.1.3 松散耦合
只要应用的某个部分过分依赖于另一部分，代码就是耦合过紧，难以维护，
1.解耦html和js
不要在html里写js，同时不要在js里写大段html代码，典型，innerHTML，好吧，有时候不得不用啊
2.解耦css和js
典型：style.overflow = "hidden"
解耦方式：尽量改变类名，而不是直接修改内联
3.解耦应用逻辑和事件处理程序
每个web应用一般都有相当多的事件处理程序，监听着无数不同的事件
要将监听事件和逻辑处理分离，应用逻辑跟事件处理无关，接收一个值，然后做事情。
要牢记应用和业务之间松散耦合的几条原则
i）不要将event对象传给其他方法，只传来自event对象中所需的数据
i）任何可以在应用层面的动作都可以在不执行任何事件处理程序的情况下进行
i）任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑
24.1.4 编程实践
要坚持以下编程实践
1.尊重对象所有权
你不能修改不属于你的对象，以如下方式为对象创建新的功能
i）创建包含所需功能的新对象，并用它与相关对象进行交互
i）创建自定义类型，继承需要修改的类型，然后为自定义类型添加功能
2.避免全局变量
最多只能有一个全局变量，
3.避免与null进行比较
代码中的null越少，就越容易确定代码的目的，并消除不必要的错误。
4.使用常量
var constants = {
    INVALID_VALUE_MSG: "Invalid value!";
    INVALID_VALUE_URL: "errors/invalid.php"
}
constants可以在单独的文件中定义
i）重复值－－任何在多处用到的值都应该抽取为一个常量
i）用户界面字符串－－任何用于显示给用户的字符串，都应该被抽取以方便国际化
i）URLs－－在web应用中，资源位置很容易变更，所以，推荐用一个公共的地方存放所有的url
i）任意可能会更改的值－－当你用到字面量值的时候，你都要问下自己，这个值在未来是不是会变化，如果是，就应该提取出一个常量
24.2 性能
24.2。1 注意作用域
1.避免全局查找
将在一个函数中会用到多次的全局对象存储为局部对象总是没错的。
2.避免with语句
24.2.2 选择正确方法
1.避免不必要的属性查找
使用变量和数组要比访问对象上的属性更有效率，后者是一个On操作，
2.优化循环
一个循环的基本优化步骤如下
i）减值迭代－－大多数循环使用一个从0开始，增加到某个特定值的迭代器，在很多情况下，从最大值开始，在循环中不断减值的迭代
器更加高效
i）简化终止条件－－
i）简化循环体
i）使用后测试循环，例如do while
3.展开循环
当循环的次数是确定的，消除循环并使用多次函数调用往往更快。
假如循环的次数无法确定，可以考虑使用一个Duff装置的技术，如果处理的不是大数据集，一般来说，不值得这样做
4.避免双重解释
实例化一个新的解析器，有不容忽视的开销
5.性能的其它注意事项
i）使用原生方法更快
i）switch语句较快，如果有一系列复杂的ifelse语句，可以转换成单个switch语句则可以得到更快的代码，还可以通过将case语句
按照最可能的到最不可能的顺序进行组织
i）按运算符较快，要比任何布尔运算或者算数运算快
24.2.3 最小化语句数
完成多个操作的单个语句，要比完成单个操作的多个语句快，
1.多个变量声明，使用一个var来声明多个变量
2.插入迭代值
var name = values[i]; i++;  => var name = values[i++]
3.使用数组和对象字面量
在本书中，有两种创建数组和对象字面量的方法，使用构造函数或者使用字面量，使用字面量方式要比构造函数方式好。
24.2.4 优化DOM交互
在js各个方面，dom是最慢的一部分，dom操作与交互要消耗大量时间 
1.最小化现场更新
一旦你需要访问的dom部分是已经显示的页面的一部分，那么你就是在进行一个现场更新，浏览器需要计算无数尺寸进行更新，现场
更新进行的越多，代码完成执行所花的时间就越长。
2.使用innerHTML
有两种在页面上创建dom节点的方法，使用诸如createElement和appendChild之类的dom方法，以及使用innerHTML。对于
大的DOM更改，使用innerHTML要比使用标准的dom方法创建同样的dom结构快得多
3.使用事件代理
页面上的事件处理程序的数量和页面响应用户交互的速度是负相关。
如果可能，在文档级别添加事件处理程序，这样可以处理整个页面的事件。
4.注意HTMLCollection
HTMLCollection对象对于web应用的性能而言是巨大的损害，任何时候访问HTMLCollection，都是在文档上进行一个查询，
发生以下情况会返回HTMLCollection对象
i）进行了对getElementByTagName的调用
i）获取了元素的childNodes属性
i）获取了元素的attributes属性
i）访问了特殊的集合，如document.forms、document.images
24.3 部署
24.3.1 构建过程
完备js代码用于部署是一件很重要的事件，就是给它开发某些类型的构建过程，软件开发的典型模式是写代码－编译－测试。
你写的代码不应该原封不动的放入浏览器，理由如下
i）知识产权问题，如果把带有完整注释的代码放在线上，别人就更容易知道你的意图。对它再利用，并切可能找到安全漏洞
i）文件大小，
i）代码组织
将每个对象或者自定义类型分别放入单独的文件中
Ant构建工具，http://ant.apache.org , 在文章www.julienlecomte.net/blog/2007/09/16介绍如何使用ant进行
js和css的构建自动化
24.3.2 验证
JSLint（www.jslint.com）可以查找js代码中的语法错误，以及常见的编码错误。
24.3.3 压缩
1.文件压缩
压缩器一般进行如下一些步骤
i）删除额外的空白
i）删除所有注释
i）缩短变量名
js有不少压缩工具可用，其中最优秀的，http://yuilibrary.com/projects/yuicompressor，YUI压缩器作为java的
一个jar文件发布的，使用方式为，java -jar yuicompressor-x.y.z.jar [options] [input files]
所有的js文件在部署到生产环境之前，都应该使用YUI压缩器或者类似的工具进行压缩，
2 http压缩
请求头和响应头有压缩方式，服务器都有压缩功能。
*/