/*
24 最佳实践
24.1 可维护性
24.1.1 什么是可维护性的代码
有以下特点
i）可理解性－－其他人可以接手代码并理解他的意图和一般途径
i）直观性－－代码中的东西一看就能明白，不管其操作过程多么复杂
i）可适应性－－代码以一种数据上的变化不要求完全重写的方法撰写
i）可拓展性－－在代码架构上已考虑到在未来允许对核心功能进行拓展
i）可调试性－－当有地方出错时，代码可以给予你足够的信息尽可能的直接确定问题所在
24.1.2 代码约定
一种让代码变得可维护的简单途径是形成一套js代码的书写约定。杰出的开放源代码项目有着严格的代码约定要求。代码约定的概论
1.可读性
可读性的大部分内容都是和代码的缩进相关的，最佳实践是使用4个空格为缩进，而不是制表符。
另一方面是注释，在大多数语言中，对每个方法的注释都视为一个可行的实践。一般而言，有如下地方需要进行注释，
i）函数与方法－－每个函数或者方法都应该包含一条注释，描述其任务和用于完成任务可能使用的算法，陈述事先的假设也很重要
比如参数和返回值
i）大段代码－－用于完成单个任务的多行代码应该在前面放一个描述任务的注释
i）复杂的算法－－如果使用了一种独特的方式解决某个问题，则要在注释中解释你是如何做的，、
i）hack－－如果因为某种浏览器无法使用普通的方法，你用到的不同的方法需要进行注释
2.变量和函数命名
i）变量名应为名词如car
i）函数名应该以动词开始，如getName
i）变量和函数都应该使用合乎逻辑的名字，不要担心长度，
有了合适的命名，代码阅读起来就像讲述故事一样，更容易理解。
3.变量类型透明
合适的变量命名应该包含 它所表示的变量的数据类型
24.1.3 松散耦合
只要应用的某个部分过分依赖于另一部分，代码就是耦合过紧，难以维护，
1.解耦html和js
不要在html里写js，同时不要在js里写大段html代码，典型，innerHTML，好吧，有时候不得不用啊
2.解耦css和js
典型：style.overflow = "hidden"
解耦方式：尽量改变类名，而不是直接修改内联
3.解耦应用逻辑和事件处理程序
每个web应用一般都有相当多的事件处理程序，监听着无数不同的事件
要将监听事件和逻辑处理分离，应用逻辑跟事件处理无关，接收一个值，然后做事情。
要牢记应用和业务之间松散耦合的几条原则
i）不要将event对象传给其他方法，只传来自event对象中所需的数据
i）任何可以在应用层面的动作都可以在不执行任何事件处理程序的情况下进行
i）任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑
24.1.4 编程实践
要坚持以下编程实践
1.尊重对象所有权

*/